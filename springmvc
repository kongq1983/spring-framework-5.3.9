@Configuration
public class WebMvcConfigurer extends WebMvcConfigurationSupport /*WebMvcConfigurerAdapter*/ {

    @Value("${swagger.enabled:false}")
    private boolean swaggerEnabled;

    @Override
    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter();
        ObjectMapper objectMapper = jackson2HttpMessageConverter.getObjectMapper();
//        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);

        objectMapper.setDateFormat(new ZyxkDateFormat("yyyy-MM-dd HH:mm:ss"));
        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, true);

        jackson2HttpMessageConverter.setObjectMapper(objectMapper);
        jackson2HttpMessageConverter.setDefaultCharset(Charset.forName("UTF-8"));
        converters.add(0,jackson2HttpMessageConverter);
    }

}


public class ZyxkDateFormat extends SimpleDateFormat {

	private static final long serialVersionUID = 1L;
    // 这个有线程安全
	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	private SimpleDateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	public ZyxkDateFormat(String pattern) {
		super();
	}

	public Date parse(String text) throws ParseException {

		if(StringUtils.isBlank(text)) return null;

		if(text.length()==10) {
			return dateFormat.parse(text);
		}else if(text.length()==19) {
			return dateTimeFormat.parse(text);
		}


		return super.parse(text);
	}
}


public class JacksonDateDeserializer extends JsonDeserializer<Date> {

    private static final ThreadLocal<SimpleDateFormat> threadLocalFormat =
            ThreadLocal.withInitial(() -> new SimpleDateFormat());



    @Override
    public Date deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {
        SimpleDateFormat simpleDateFormat = threadLocalFormat.get();
        try {
            simpleDateFormat.applyPattern("yyyy-MM-dd");
//            simpleDateFormat.applyPattern("yyyy-MM-dd HH:mm:ss");
            return simpleDateFormat.parse(parser.getText());
        } catch (ParseException e) {
            e.printStackTrace();
            try {
//                simpleDateFormat.applyPattern("yyyy-MM-dd");
                simpleDateFormat.applyPattern("yyyy-MM-dd HH:mm:ss");
                return simpleDateFormat.parse(parser.getText());
            } catch (Exception ex) {
                throw new BizRuntimeException("转换日期失败：" + parser.getText());
            }
        }
    }

}