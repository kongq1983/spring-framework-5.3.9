

=========================================================================
postProcessBeforeInitialization   postProcessAfterInitialization
-------------------------------------------------------------------
ApplicationContextAwareProcessor
ConfigurationClassPostProcessor.ImportAwareBeanPostProcessor
PostProcessorRegistrationDelegate.BeanPostProcessorChecker  // 校验-忽略
CommonAnnotationBeanPostProcessor
AutowiredAnnotationBeanPostProcessor
ApplicationListenerDetector
=========================================================================



CommonAnnotationBeanPostProcessor
AutowiredAnnotationBeanPostProcessor

=========================================================================

# 验证

静态工厂
ConfigurationClassBeanDefinitionReader: 226

@Bean
ConfigurationClassBeanDefinitionReader: 236



prepareMethodOverrides

replaceMethod

@DependsOn.class depends  AbstractBeanFactory:313

@Lazy

ConfigurationClassBeanDefinitionReader:309

=========================================================================

判断beanName重名
ClassPathBeanDefinitionScanner:287
ClassPathBeanDefinitionScanner:344

beanName重复

在配置类里，2个同名会被现有的覆盖，能启动，允许第2个的时候会报错
独立文件里

Condition

==================================================================================================================

CandidateComponentsIndexLoader
ClassPathScanningCandidateComponentProvider.findCandidateComponents
META-INF/spring.components

Spring 5改进了扫描和识别组件的方法，使大型项目的性能得到提升。目前，扫描是在编译时执行的，
而且向META-INF/spring.components文件中的索引文件添加了组件坐标。该索引是通过一个为项目定义的特定于平台的应用程序构建任务来生成的。
标有来自javax包的注解的组件会添加到索引中，任何带@Index注解的类或接口都会添加到索引中。Spring的传统类路径扫描方式没有被删除，
而是保留下来作为一种后备选择。有许多针对大型代码库的明显性能优势，托管许多Spring项目的服务器也会缩短启动时间

==================================================================================================================

import

ConfigurationClassParser.processImports 处理@Import注解

 * @see DeferredImportSelector
 * @see Import
 * @see ImportBeanDefinitionRegistrar

扩展点
 ImportSelector
 ImportBeanDefinitionRegistrar

 @ImportResource 处理xml导入


 @Configuration
 @Import({AnimalSelector.class , AnimalImportBeanDefinitionRegistrar.class})
 @ImportResource("xmlbean.xml")
 public class AnimalConfiguration {

 }
 ==================================================================================================================

ImportSelector
// Car  Dog
String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());
Collection<SourceClass> importSourceClasses = asSourceClasses(importClassNames, exclusionFilter);